{"version":3,"sources":["index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAA,mBAAA,aAAA,YAAA;AAAA,aAAA,gBAAA,GAAA,CAyDC;AApDU,qBAAA,SAAA,CAAA,UAAA,GAAP,UAAkB,YAAlB,EAAgD;AAC5C,YAAG,CAAC,YAAJ,EAAiB;AACb;AACH;AAED,YAAI,QAAQ,KAAK,yBAAL,CAA+B,YAA/B,CAAZ;AAEA,YAAI,iBAAiB,SAAS,cAAT,CAAwB,UAAxB,CAArB;AACA,YAAI,CAAC,cAAL,EAAqB;AACjB;AACH;AAED,YAAI,aAAa,KAAK,4BAAL,CAAkC,KAAlC,CAAjB;AACA,YAAI,CAAC,UAAL,EAAiB;AACb;AACH;AAED,YAAI,YAAY,WAAhB;AACA,YAAI,YAAY,WAAhB;AACA,qBAAa,WAAW,OAAX,CAAmB,SAAnB,EAA8B,SAA9B,CAAb;AAEA,YAAI,eAAe,WAAW,OAAX,CAAmB,GAAnB,CAAnB;AACA,YAAI,WAAW,WAAW,MAAX,CAAkB,CAAlB,EAAqB,YAArB,CAAf;AACA,YAAI,WAAW,WAAW,MAAX,CAAkB,eAAe,CAAjC,CAAf;AAEA,uBAAe,SAAf,GACI,0BAA0B,QAA1B,GAAqC,SAArC,GACE,4BADF,GAEE,uBAFF,GAE4B,QAF5B,GAEuC,SAH3C;AAIH,KA7BM;AA+BC,qBAAA,SAAA,CAAA,4BAAA,GAAR,UAAqC,KAArC,EAAkD;AAC9C,YAAI,MAAM,KAAN,CAAJ,EAAkB;AACd,mBAAO,2BAAP;AACH;AAED;AACA,YAAI,kBAAkB,QAAQ,iBAAiB,UAA/C;AACA,YAAI,yBAAyB,kBAAkB,iBAAiB,mBAAhE;AACA,YAAI,yBAAyB,iBAAiB,mBAA9C,EAAmE;AAC/D;AACA,mBAAO,2BAAP;AACH;AACD;AACA,YAAI,OAAO,IAAI,IAAJ,CAAS,sBAAT,CAAX;AACA,eAAO,KAAK,WAAL,EAAP;AACH,KAfO;AAiBA,qBAAA,SAAA,CAAA,yBAAA,GAAR,UAAkC,YAAlC,EAAgE;AAC5D,YAAI,WAAW,aAAa,KAA5B;AACA,eAAO,OAAO,QAAP,CAAP;AACH,KAHO;AApDD,qBAAA,UAAA,GAAqB,kBAArB;AACA,qBAAA,mBAAA,GAA8B,KAA9B;AACA,qBAAA,mBAAA,GAA8B,gBAA9B,CAHX,CAG2D;AAsD3D,WAAA,gBAAA;AAzDA,CAAA,EAAA;AA2DA,IAAI,iBAAiB,IAAI,GAAJ,CAAQ,CAAC,OAAD,EAAU,kBAAV,EAA8B,OAA9B,EAAuC,QAAvC,EAAiD,OAAjD,CAAR,CAArB;AAEA,OAAO,MAAP,GAAgB,YAAA;AACZ,QAAI,aAAa,SAAS,cAAT,CAAwB,OAAxB,CAAjB;AACA,QAAI,UAAU,IAAI,gBAAJ,EAAd;AACA,YAAQ,UAAR,CAAmB,UAAnB;AAEA,mBAAe,OAAf,CAAuB,UAAC,SAAD,EAAiB;AACpC,YAAG,UAAH,EAAc;AACV,uBAAW,gBAAX,CAA4B,SAA5B,EAAuC,UAAC,EAAD,EAAU;AAC7C,oBAAI,eAAe,GAAG,MAAtB;AACA,oBAAI,UAAU,IAAI,gBAAJ,EAAd;AACA,wBAAQ,UAAR,CAAmB,YAAnB;AACH,aAJD;AAKH;AACJ,KARD;AASH,CAdD","file":"src.e40b5eef.map","sourceRoot":"..\\src","sourcesContent":["class TickInputHandler {\n    static epochTicks: number = 621355968000000000;\n    static ticksPerMillisecond: number = 10000;\n    static maxDateMilliseconds: number = 8640000000000000; // http://ecma-international.org/ecma-262/5.1/#sec-15.9.1.1\n\n    public showResult(inputElement: HTMLInputElement) {\n        if(!inputElement){\n            return;\n        }\n\n        var value = this.getTickInputValueAsNumber(inputElement);\n\n        var dateTimeOutput = document.getElementById(\"datetime\");\n        if (!dateTimeOutput) {\n            return;\n        }\n\n        var dateString = this.convertTicksToDateTimeString(value);\n        if (!dateString) {\n            return;\n        }\n\n        var goodParts = /([0-9]+)/g;\n        var wrapParts = \"<b>$1</b>\";\n        dateString = dateString.replace(goodParts, wrapParts);\n\n        var firstTIndext = dateString.indexOf(\"T\");\n        var datePart = dateString.substr(0, firstTIndext);\n        var timePart = dateString.substr(firstTIndext + 1);\n\n        dateTimeOutput.innerHTML =\n            \"<span class=\\\"line\\\">\" + datePart + \"</span>\"\n            + \"<span class='pad'>T</span>\"\n            + \"<span class=\\\"line\\\">\" + timePart + \"</span>\";\n    }\n\n    private convertTicksToDateTimeString(ticks: number) {\n        if (isNaN(ticks)) {\n            return \"____-__-__T__:__:__.____Z\";\n        }\n\n        // convert the ticks into something javascript understands\n        var ticksSinceEpoch = ticks - TickInputHandler.epochTicks;\n        var millisecondsSinceEpoch = ticksSinceEpoch / TickInputHandler.ticksPerMillisecond;\n        if (millisecondsSinceEpoch > TickInputHandler.maxDateMilliseconds) {\n            //      +035210-09-17T07:18:31.111Z\n            return \"9999-99-99T99:99:99:9999Z\";\n        }\n        // output the result in something the human understands\n        var date = new Date(millisecondsSinceEpoch);\n        return date.toISOString();\n    }\n\n    private getTickInputValueAsNumber(inputElement: HTMLInputElement) {\n        var valueStr = inputElement.value;\n        return Number(valueStr);\n    }\n}\n\nvar possibleEvents = new Set([\"input\", \"onpropertychange\", \"keyup\", \"change\", \"paste\"]);\n\nwindow.onload = () => {\n    var ticksInput = document.getElementById(\"ticks\") as HTMLInputElement;\n    var handler = new TickInputHandler();\n    handler.showResult(ticksInput);\n\n    possibleEvents.forEach((eventName:string) => {\n        if(ticksInput){\n            ticksInput.addEventListener(eventName, (ev: Event) => {\n                var inputElement = ev.target as HTMLInputElement;\n                var handler = new TickInputHandler();\n                handler.showResult(inputElement);\n            })\n        }\n    });\n};"]}