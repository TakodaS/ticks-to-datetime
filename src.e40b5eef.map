{"version":3,"sources":["index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAA,mBAAA,aAAA,YAAA;AAKI,aAAA,gBAAA,GAAA;AACI,YAAI,eAAe,SAAS,cAAT,CAAwB,OAAxB,CAAnB;AACA,yBAAiB,UAAjB,CAA4B,YAA5B;AACH;AAEM,qBAAA,SAAA,CAAA,MAAA,GAAP,UAAc,KAAd,EAAkC;AAC9B,YAAM,SAAS,MAAM,MAArB;AACA,YAAI,CAAC,iBAAiB,WAAjB,CAA6B,MAA7B,CAAL,EAA2C;AACvC;AACH;AAED,YAAI,eAAe,MAAnB;AACA,yBAAiB,UAAjB,CAA4B,YAA5B;AACH,KARM;AAUA,qBAAA,UAAA,GAAP,UAAkB,YAAlB,EAAgD;AAC5C,YAAI,QAAQ,iBAAiB,yBAAjB,CAA2C,YAA3C,CAAZ;AAEA,YAAI,iBAAiB,SAAS,cAAT,CAAwB,UAAxB,CAArB;AACA,YAAI,CAAC,cAAL,EAAqB;AACjB;AACH;AAED,YAAI,aAAa,iBAAiB,UAAjB,CAA4B,KAA5B,CAAjB;AACA,YAAI,CAAC,UAAL,EAAiB;AACb;AACH;AAED,YAAI,YAAY,WAAhB;AACA,YAAI,YAAY,WAAhB;AACA,qBAAa,WAAW,OAAX,CAAmB,SAAnB,EAA8B,SAA9B,CAAb;AAEA,YAAI,eAAe,WAAW,OAAX,CAAmB,GAAnB,CAAnB;AACA,YAAI,WAAW,WAAW,MAAX,CAAkB,CAAlB,EAAqB,YAArB,CAAf;AACA,YAAI,WAAW,WAAW,MAAX,CAAkB,eAAe,CAAjC,CAAf;AAEA,uBAAe,SAAf,GACI,WACE,4BADF,GAEE,QAHN;AAIH,KAzBM;AA2BA,qBAAA,UAAA,GAAP,UAAkB,KAAlB,EAA+B;AAC3B,YAAI,MAAM,KAAN,CAAJ,EAAkB;AACd,mBAAO,2BAAP;AACH;AAED;AACA,YAAI,kBAAkB,QAAQ,iBAAiB,UAA/C;AACA,YAAI,yBAAyB,kBAAkB,iBAAiB,mBAAhE;AACA,YAAI,yBAAyB,iBAAiB,mBAA9C,EAAmE;AAC/D;AACA,mBAAO,2BAAP;AACH;AACD;AACA,YAAI,OAAO,IAAI,IAAJ,CAAS,sBAAT,CAAX;AACA,eAAO,KAAK,WAAL,EAAP;AACH,KAfM;AAiBA,qBAAA,WAAA,GAAP,UAAmB,MAAnB,EAAsC;AAClC,eAAO,OAAO,OAAP,IAAkB,OAAlB,IAA6B,OAAO,EAAP,IAAa,OAAjD;AACH,KAFM;AAIA,qBAAA,yBAAA,GAAP,UAAiC,YAAjC,EAA+D;AAC3D,YAAI,WAAW,aAAa,KAA5B;AACA,eAAO,OAAO,QAAP,CAAP;AACH,KAHM;AAnEA,qBAAA,UAAA,GAAqB,kBAArB;AACA,qBAAA,mBAAA,GAA8B,KAA9B;AACA,qBAAA,mBAAA,GAA8B,gBAA9B,CAHX,CAG2D;AAqE3D,WAAA,gBAAA;AAxEA,CAAA,EAAA;AA0EA,OAAO,MAAP,GAAgB,YAAA;AACZ,QAAI,UAAU,IAAI,gBAAJ,EAAd;AACA,aAAS,gBAAT,CAA0B,OAA1B,EAAmC,QAAQ,MAA3C;AACH,CAHD","file":"src.e40b5eef.map","sourceRoot":"..\\src","sourcesContent":["class TickInputHandler {\n    static epochTicks: number = 621355968000000000;\n    static ticksPerMillisecond: number = 10000;\n    static maxDateMilliseconds: number = 8640000000000000; // http://ecma-international.org/ecma-262/5.1/#sec-15.9.1.1\n\n    constructor() {\n        var inputElement = document.getElementById(\"ticks\") as HTMLInputElement;\n        TickInputHandler.showResult(inputElement);\n    }\n\n    public doWork(event: KeyboardEvent) {\n        const target = event.target as HTMLElement;\n        if (!TickInputHandler.isTickInput(target)) {\n            return;\n        }\n\n        var inputElement = target as HTMLInputElement;\n        TickInputHandler.showResult(inputElement);\n    }\n\n    static showResult(inputElement: HTMLInputElement) {\n        var value = TickInputHandler.getTickInputValueAsNumber(inputElement);\n\n        var dateTimeOutput = document.getElementById(\"datetime\");\n        if (!dateTimeOutput) {\n            return;\n        }\n\n        var dateString = TickInputHandler.parseTicks(value);\n        if (!dateString) {\n            return;\n        }\n\n        var goodParts = /([0-9]+)/g;\n        var wrapParts = \"<b>$1</b>\";\n        dateString = dateString.replace(goodParts, wrapParts);\n\n        var firstTIndext = dateString.indexOf(\"T\");\n        var datePart = dateString.substr(0, firstTIndext);\n        var timePart = dateString.substr(firstTIndext + 1);\n\n        dateTimeOutput.innerHTML =\n            datePart\n            + \"<span class='pad'>T</span>\"\n            + timePart;\n    }\n\n    static parseTicks(ticks: number) {\n        if (isNaN(ticks)) {\n            return \"____-__-__T__:__:__.____Z\";\n        }\n\n        // convert the ticks into something javascript understands\n        var ticksSinceEpoch = ticks - TickInputHandler.epochTicks;\n        var millisecondsSinceEpoch = ticksSinceEpoch / TickInputHandler.ticksPerMillisecond;\n        if (millisecondsSinceEpoch > TickInputHandler.maxDateMilliseconds) {\n            //      +035210-09-17T07:18:31.111Z\n            return \"9999-99-99T99:99:99:9999Z\";\n        }\n        // output the result in something the human understands\n        var date = new Date(millisecondsSinceEpoch);\n        return date.toISOString();\n    }\n\n    static isTickInput(target: HTMLElement) {\n        return target.tagName == 'INPUT' && target.id == 'ticks';\n    }\n\n    static getTickInputValueAsNumber(inputElement: HTMLInputElement) {\n        var valueStr = inputElement.value;\n        return Number(valueStr);\n    }\n}\n\nwindow.onload = () => {\n    var handler = new TickInputHandler();\n    document.addEventListener(\"keyup\", handler.doWork);\n};"]}