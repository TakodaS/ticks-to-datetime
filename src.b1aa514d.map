{"version":3,"sources":["index.ts"],"names":[],"mappings":";AA6DA,aA7DA,IAAA,EAAA,WAAA,SAAA,KAyDA,OApDW,EAAA,UAAA,WAAP,SAAkB,GACX,GAAC,EAAD,CAIC,IAAA,EAAQ,KAAK,0BAA0B,GAEvC,EAAiB,SAAS,eAAe,YACzC,GAAC,EAAD,CAIA,IAAA,EAAa,KAAK,6BAA6B,GAC/C,GAAC,EAAD,CAIA,IAIA,GAFS,EAAA,EAAW,QAFR,YACA,cAGc,QAAQ,KAClC,EAAW,EAAW,OAAO,EAAG,GAChC,EAAW,EAAW,OAAO,EAAe,GAEjC,EAAA,UACX,sBAA0B,EAAW,yDAET,EAAW,cAGvC,EAAA,UAAA,6BAAR,SAAqC,GAC7B,GAAA,MAAM,GACC,MAAA,4BAIP,IACA,GADkB,EAAQ,EAAiB,YACA,EAAiB,oBAC5D,OAAA,EAAyB,EAAiB,oBAEnC,4BAGA,IAAI,KAAK,GACR,eAGR,EAAA,UAAA,0BAAR,SAAkC,GAC1B,IAAA,EAAW,EAAa,MACrB,OAAA,OAAO,IAtDX,EAAA,WAAqB,YACrB,EAAA,oBAA8B,IAC9B,EAAA,oBAA8B,OAsDzC,EAzDA,GA2DI,EAAiB,IAAI,IAAI,CAAC,QAAS,mBAAoB,QAAS,SAAU,UAE9E,OAAO,OAAS,WACR,IAAA,EAAa,SAAS,eAAe,UAC3B,IAAI,GACV,WAAW,GAEJ,EAAA,QAAQ,SAAC,GACjB,GACY,EAAA,iBAAiB,EAAW,SAAC,GAChC,IAAA,EAAe,EAAG,QACR,IAAI,GACV,WAAW","file":"src.b1aa514d.map","sourceRoot":"..\\src","sourcesContent":["class TickInputHandler {\n    static epochTicks: number = 621355968000000000;\n    static ticksPerMillisecond: number = 10000;\n    static maxDateMilliseconds: number = 8640000000000000; // http://ecma-international.org/ecma-262/5.1/#sec-15.9.1.1\n\n    public showResult(inputElement: HTMLInputElement) {\n        if(!inputElement){\n            return;\n        }\n\n        var value = this.getTickInputValueAsNumber(inputElement);\n\n        var dateTimeOutput = document.getElementById(\"datetime\");\n        if (!dateTimeOutput) {\n            return;\n        }\n\n        var dateString = this.convertTicksToDateTimeString(value);\n        if (!dateString) {\n            return;\n        }\n\n        var goodParts = /([0-9]+)/g;\n        var wrapParts = \"<b>$1</b>\";\n        dateString = dateString.replace(goodParts, wrapParts);\n\n        var firstTIndext = dateString.indexOf(\"T\");\n        var datePart = dateString.substr(0, firstTIndext);\n        var timePart = dateString.substr(firstTIndext + 1);\n\n        dateTimeOutput.innerHTML =\n            \"<span class=\\\"line\\\">\" + datePart + \"</span>\"\n            + \"<span class='pad'>T</span>\"\n            + \"<span class=\\\"line\\\">\" + timePart + \"</span>\";\n    }\n\n    private convertTicksToDateTimeString(ticks: number) {\n        if (isNaN(ticks)) {\n            return \"____-__-__T__:__:__.____Z\";\n        }\n\n        // convert the ticks into something javascript understands\n        var ticksSinceEpoch = ticks - TickInputHandler.epochTicks;\n        var millisecondsSinceEpoch = ticksSinceEpoch / TickInputHandler.ticksPerMillisecond;\n        if (millisecondsSinceEpoch > TickInputHandler.maxDateMilliseconds) {\n            //      +035210-09-17T07:18:31.111Z\n            return \"9999-99-99T99:99:99:9999Z\";\n        }\n        // output the result in something the human understands\n        var date = new Date(millisecondsSinceEpoch);\n        return date.toISOString();\n    }\n\n    private getTickInputValueAsNumber(inputElement: HTMLInputElement) {\n        var valueStr = inputElement.value;\n        return Number(valueStr);\n    }\n}\n\nvar possibleEvents = new Set([\"input\", \"onpropertychange\", \"keyup\", \"change\", \"paste\"]);\n\nwindow.onload = () => {\n    var ticksInput = document.getElementById(\"ticks\") as HTMLInputElement;\n    var handler = new TickInputHandler();\n    handler.showResult(ticksInput);\n\n    possibleEvents.forEach((eventName:string) => {\n        if(ticksInput){\n            ticksInput.addEventListener(eventName, (ev: Event) => {\n                var inputElement = ev.target as HTMLInputElement;\n                var handler = new TickInputHandler();\n                handler.showResult(inputElement);\n            })\n        }\n    });\n};"]}